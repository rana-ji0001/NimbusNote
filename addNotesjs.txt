
// import React from 'react'
import { useState, useContext } from "react";
import noteContext from "../context/notes/noteContext";

const AddNotes = () => {
    const context = useContext(noteContext);
    // eslint-disable-next-line
    const {notes, addNotes} = context;
    const [note, setNote] = useState({title: "", description: "", tag: ""})
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [showSuccess, setShowSuccess] = useState(false);
    const [focusedField, setFocusedField] = useState("");

    const handleClick = async (e) => {
        e.preventDefault();
        setIsSubmitting(true);
        
        try {
            await addNotes(note.title, note.description, note.tag);
            setNote({title: "", description: "", tag: ""});
            setShowSuccess(true);
            setTimeout(() => setShowSuccess(false), 3000);
        } catch (error) {
            console.error("Error adding note:", error);
        } finally {
            setIsSubmitting(false);
        }
    }

    const onChange = (e) => {
        setNote({...note, [e.target.name]: e.target.value})
    }

    const getFieldStatus = (field, minLength = 5) => {
        const length = note[field].length;
        if (length === 0) return "";
        if (length < minLength) return "warning";
        return "success";
    }

    return (
        <div>
            <style jsx>{`
                .add-notes-container {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    border-radius: 20px;
                    padding: 30px;
                    margin: 20px 0;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.1);
                    position: relative;
                    overflow: hidden;
                }
                
                .add-notes-container::before {
                    content: '';
                    position: absolute;
                    top: -50%;
                    left: -50%;
                    width: 200%;
                    height: 200%;
                    background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
                    animation: shimmer 3s ease-in-out infinite;
                }
                
                @keyframes shimmer {
                    0%, 100% { transform: rotate(0deg); }
                    50% { transform: rotate(180deg); }
                }
                
                .form-container {
                    position: relative;
                    z-index: 2;
                    background: rgba(255,255,255,0.95);
                    backdrop-filter: blur(10px);
                    border-radius: 15px;
                    padding: 25px;
                    box-shadow: 0 4px 20px rgba(0,0,0,0.1);
                }
                
                .form-title {
                    color: #333;
                    margin-bottom: 25px;
                    font-weight: 600;
                    text-align: center;
                }
                
                .form-group {
                    margin-bottom: 20px;
                    transition: all 0.3s ease;
                }
                
                .form-group.focused {
                    transform: scale(1.02);
                }
                
                .form-control-enhanced {
                    border: 2px solid #e9ecef;
                    border-radius: 12px;
                    padding: 12px 16px;
                    font-size: 16px;
                    transition: all 0.3s ease;
                    background: #fff;
                }
                
                .form-control-enhanced:focus {
                    border-color: #667eea;
                    box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
                    transform: translateY(-2px);
                }
                
                .form-control-enhanced.is-valid {
                    border-color: #28a745;
                    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%2328a745' d='m2.3 6.73.94-.94 1.88.94L7.7 4.15l-.94-.94L4.88 5.09z'/%3e%3c/svg%3e");
                    background-repeat: no-repeat;
                    background-position: right calc(0.375em + 0.1875rem) center;
                    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
                }
                
                .form-control-enhanced.is-warning {
                    border-color: #ffc107;
                    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23ffc107' d='M4 0L1 7h6z'/%3e%3c/svg%3e");
                    background-repeat: no-repeat;
                    background-position: right calc(0.375em + 0.1875rem) center;
                    background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
                }
                
                .form-label-enhanced {
                    font-weight: 600;
                    color: #495057;
                    margin-bottom: 8px;
                    transition: all 0.3s ease;
                }
                
                .form-label-enhanced.focused {
                    color: #667eea;
                    transform: translateX(5px);
                }
                
                .char-counter {
                    font-size: 12px;
                    text-align: right;
                    margin-top: 4px;
                    transition: all 0.3s ease;
                }
                
                .char-counter.success { color: #28a745; }
                .char-counter.warning { color: #ffc107; }
                .char-counter.default { color: #6c757d; }
                
                .submit-btn {
                    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                    border: none;
                    border-radius: 25px;
                    padding: 12px 30px;
                    font-weight: 600;
                    color: white;
                    transition: all 0.3s ease;
                    position: relative;
                    overflow: hidden;
                    width: 100%;
                    font-size: 16px;
                }
                
                .submit-btn:hover:not(:disabled) {
                    transform: translateY(-3px);
                    box-shadow: 0 8px 25px rgba(40, 167, 69, 0.3);
                }
                
                .submit-btn:active:not(:disabled) {
                    transform: translateY(-1px);
                }
                
                .submit-btn:disabled {
                    background: #6c757d;
                    cursor: not-allowed;
                    transform: none;
                    box-shadow: none;
                }
                
                .submit-btn::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: -100%;
                    width: 100%;
                    height: 100%;
                    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
                    transition: left 0.5s;
                }
                
                .submit-btn:hover::before {
                    left: 100%;
                }
                
                .loading-spinner {
                    display: inline-block;
                    width: 16px;
                    height: 16px;
                    border: 2px solid rgba(255,255,255,0.3);
                    border-top: 2px solid white;
                    border-radius: 50%;
                    animation: spin 1s linear infinite;
                    margin-right: 8px;
                }
                
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
                
                .success-notification {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
                    color: white;
                    padding: 15px 25px;
                    border-radius: 10px;
                    box-shadow: 0 4px 20px rgba(0,0,0,0.2);
                    z-index: 9999;
                    animation: slideInRight 0.3s ease-out;
                }
                
                @keyframes slideInRight {
                    from {
                        transform: translateX(100%);
                        opacity: 0;
                    }
                    to {
                        transform: translateX(0);
                        opacity: 1;
                    }
                }
                
                .floating-particles {
                    position: absolute;
                    width: 100%;
                    height: 100%;
                    top: 0;
                    left: 0;
                    pointer-events: none;
                    overflow: hidden;
                }
                
                .particle {
                    position: absolute;
                    background: rgba(255,255,255,0.1);
                    border-radius: 50%;
                    animation: float 6s ease-in-out infinite;
                }
                
                .particle:nth-child(1) {
                    width: 6px;
                    height: 6px;
                    left: 10%;
                    animation-delay: 0s;
                }
                
                .particle:nth-child(2) {
                    width: 8px;
                    height: 8px;
                    left: 30%;
                    animation-delay: 2s;
                }
                
                .particle:nth-child(3) {
                    width: 4px;
                    height: 4px;
                    left: 60%;
                    animation-delay: 4s;
                }
                
                .particle:nth-child(4) {
                    width: 10px;
                    height: 10px;
                    left: 80%;
                    animation-delay: 1s;
                }
                
                @keyframes float {
                    0%, 100% {
                        transform: translateY(100vh) rotate(0deg);
                        opacity: 0;
                    }
                    10%, 90% {
                        opacity: 1;
                    }
                    50% {
                        transform: translateY(-20px) rotate(180deg);
                    }
                }
                
                .form-fade-in {
                    animation: formFadeIn 0.5s ease-out;
                }
                
                @keyframes formFadeIn {
                    from {
                        opacity: 0;
                        transform: translateY(20px);
                    }
                    to {
                        opacity: 1;
                        transform: translateY(0);
                    }
                }
                
                .pulse-effect {
                    animation: pulse 2s infinite;
                }
                
                @keyframes pulse {
                    0% { box-shadow: 0 0 0 0 rgba(102, 126, 234, 0.7); }
                    70% { box-shadow: 0 0 0 10px rgba(102, 126, 234, 0); }
                    100% { box-shadow: 0 0 0 0 rgba(102, 126, 234, 0); }
                }
            `}</style>

            {/* Success Notification */}
            {showSuccess && (
                <div className="success-notification">
                    <strong>🎉 Success!</strong> Note added successfully!
                </div>
            )}

            <div className="add-notes-container">
                {/* Floating Particles */}
                <div className="floating-particles">
                    <div className="particle"></div>
                    <div className="particle"></div>
                    <div className="particle"></div>
                    <div className="particle"></div>
                </div>

                <div className="container my-3">
                    <div className="form-container form-fade-in">
                        <h2 className="form-title">✨ Add a Note</h2>
                        <form className='my-3'>
                            <div className={`form-group ${focusedField === 'title' ? 'focused' : ''}`}>
                                <label htmlFor="title" className={`form-label form-label-enhanced ${focusedField === 'title' ? 'focused' : ''}`}>
                                    📝 Title
                                </label>
                                <input 
                                    type="text" 
                                    className={`form-control form-control-enhanced ${getFieldStatus('title') === 'success' ? 'is-valid' : ''} ${getFieldStatus('title') === 'warning' ? 'is-warning' : ''}`}
                                    id="title" 
                                    name="title" 
                                    value={note.title} 
                                    onChange={onChange}
                                    onFocus={() => setFocusedField('title')}
                                    onBlur={() => setFocusedField('')}
                                    placeholder="Enter an engaging title..."
                                    maxLength="100"
                                />
                                <div className={`char-counter ${getFieldStatus('title') || 'default'}`}>
                                    {note.title.length}/100 characters {note.title.length > 0 && note.title.length < 5 && "(minimum 5 characters)"}
                                </div>
                            </div>

                            <div className={`form-group ${focusedField === 'description' ? 'focused' : ''}`}>
                                <label htmlFor="description" className={`form-label form-label-enhanced ${focusedField === 'description' ? 'focused' : ''}`}>
                                    📄 Description
                                </label>
                                <textarea 
                                    className={`form-control form-control-enhanced ${getFieldStatus('description') === 'success' ? 'is-valid' : ''} ${getFieldStatus('description') === 'warning' ? 'is-warning' : ''}`}
                                    id="description" 
                                    name="description" 
                                    value={note.description} 
                                    onChange={onChange}
                                    onFocus={() => setFocusedField('description')}
                                    onBlur={() => setFocusedField('')}
                                    placeholder="Describe your note in detail..."
                                    rows="4"
                                    maxLength="500"
                                />
                                <div className={`char-counter ${getFieldStatus('description') || 'default'}`}>
                                    {note.description.length}/500 characters {note.description.length > 0 && note.description.length < 5 && "(minimum 5 characters)"}
                                </div>
                            </div>

                            <div className={`form-group ${focusedField === 'tag' ? 'focused' : ''}`}>
                                <label htmlFor="tag" className={`form-label form-label-enhanced ${focusedField === 'tag' ? 'focused' : ''}`}>
                                    🏷️ Tag
                                </label>
                                <input 
                                    type="text" 
                                    className="form-control form-control-enhanced"
                                    id="tag" 
                                    name="tag" 
                                    value={note.tag} 
                                    onChange={onChange}
                                    onFocus={() => setFocusedField('tag')}
                                    onBlur={() => setFocusedField('')}
                                    placeholder="Add a category tag..."
                                    maxLength="50"
                                />
                                <div className="char-counter default">
                                    {note.tag.length}/50 characters
                                </div>
                            </div>
                            
                            <button 
                                disabled={note.title.length < 5 || note.description.length < 5 || isSubmitting} 
                                type="submit" 
                                className={`btn submit-btn ${(note.title.length >= 5 && note.description.length >= 5) ? 'pulse-effect' : ''}`}
                                onClick={handleClick}
                            >
                                {isSubmitting ? (
                                    <>
                                        <span className="loading-spinner"></span>
                                        Adding Note...
                                    </>
                                ) : (
                                    <>
                                        🚀 Add Note
                                    </>
                                )}
                            </button>

                            {/* Form Progress Indicator */}
                            <div className="mt-3">
                                <div className="d-flex justify-content-between align-items-center">
                                    <small className="text-muted">Form Progress:</small>
                                    <div className="d-flex gap-2">
                                        <div className={`badge ${note.title.length >= 5 ? 'bg-success' : 'bg-secondary'}`}>
                                            Title {note.title.length >= 5 ? '✓' : '○'}
                                        </div>
                                        <div className={`badge ${note.description.length >= 5 ? 'bg-success' : 'bg-secondary'}`}>
                                            Description {note.description.length >= 5 ? '✓' : '○'}
                                        </div>
                                        <div className={`badge ${note.tag.length > 0 ? 'bg-info' : 'bg-secondary'}`}>
                                            Tag {note.tag.length > 0 ? '✓' : '○'}
                                        </div>
                                    </div>
                                </div>
                                <div className="progress mt-2" style={{height: '4px'}}>
                                    <div 
                                        className="progress-bar bg-success" 
                                        style={{
                                            width: `${Math.min(100, ((note.title.length >= 5 ? 50 : 0) + (note.description.length >= 5 ? 50 : 0)))}%`,
                                            transition: 'width 0.3s ease'
                                        }}
                                    ></div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    )
}

export default AddNotes