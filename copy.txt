// import React from 'react'
import noteContext from "../context/notes/noteContext"
import { useContext, useEffect, useRef, useState } from "react";
import Noteitem from "./Noteitem";
import AddNotes from "./AddNotes";

function Notes() {
  const context = useContext(noteContext);
  const [note, setNote] = useState({id:"", etitle: "", edescription: "", etag: "" })
  const [isLoading, setIsLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterTag, setFilterTag] = useState("");
  const [showSuccess, setShowSuccess] = useState(false);

  const { notes, getNotes, editNotes} = context;

  useEffect(() => {
    getNotes();
    // eslint-disable-next-line
  }, []);

  const updateNote = (currentNote) => {
    ref.current.click();
    setNote({id:currentNote._id, etitle:currentNote.title, edescription:currentNote.description, etag:currentNote.tag});
  }

  const ref = useRef(null);
  const refClose = useRef(null);

  const handleClick = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    
    try {
      await editNotes(note.id, note.etitle, note.edescription, note.etag);
      refClose.current.click();
      setShowSuccess(true);
      setTimeout(() => setShowSuccess(false), 3000);
    } catch (error) {
      console.error("Error updating note:", error);
    } finally {
      setIsLoading(false);
    }
  }

  const onChange = (e) => {
    setNote({ ...note, [e.target.name]: e.target.value });
  }

  // Filter notes based on search term and tag
  const filteredNotes = notes.filter(noteItem => {
    const matchesSearch = noteItem.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         noteItem.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesTag = filterTag === "" || noteItem.tag.toLowerCase().includes(filterTag.toLowerCase());
    return matchesSearch && matchesTag;
  });

  // Get unique tags for filter dropdown
  const uniqueTags = [...new Set(notes.map(note => note.tag).filter(tag => tag))];

  return (
    <>
      <style jsx>{`
        .fade-in {
          animation: fadeIn 0.3s ease-in;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }
        
        .search-container {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          border-radius: 15px;
          padding: 20px;
          margin-bottom: 20px;
          box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }
        
        .search-input {
          border: none;
          border-radius: 25px;
          padding: 12px 20px;
          font-size: 16px;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          transition: all 0.3s ease;
        }
        
        .search-input:focus {
          box-shadow: 0 4px 20px rgba(0,0,0,0.2);
          transform: translateY(-2px);
        }
        
        .modal-content {
          border: none;
          border-radius: 15px;
          box-shadow: 0 10px 40px rgba(0,0,0,0.2);
          overflow: hidden;
        }
        
        .modal-header {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
          border: none;
        }
        
        .btn-interactive {
          transition: all 0.3s ease;
          border-radius: 25px;
          padding: 8px 20px;
          font-weight: 500;
        }
        
        .btn-interactive:hover {
          transform: translateY(-2px);
          box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }
        
        .btn-interactive:active {
          transform: translateY(0);
        }
        
        .notes-grid {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
          gap: 20px;
          margin-top: 20px;
        }
        
        .success-alert {
          position: fixed;
          top: 20px;
          right: 20px;
          z-index: 9999;
          border-radius: 10px;
          box-shadow: 0 4px 15px rgba(0,0,0,0.1);
          animation: slideIn 0.3s ease-out;
        }
        
        @keyframes slideIn {
          from { transform: translateX(100%); }
          to { transform: translateX(0); }
        }
        
        .loading-spinner {
          display: inline-block;
          width: 20px;
          height: 20px;
          border: 2px solid #f3f3f3;
          border-top: 2px solid #007bff;
          border-radius: 50%;
          animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
        
        .note-count {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
          padding: 10px 20px;
          border-radius: 25px;
          display: inline-block;
          margin-bottom: 15px;
          font-weight: 500;
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .filter-container {
          display: flex;
          gap: 15px;
          align-items: center;
          flex-wrap: wrap;
        }
        
        .form-control:focus {
          border-color: #667eea;
          box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }
        
        .empty-state {
          text-align: center;
          padding: 40px;
          color: #6c757d;
        }
        
        .empty-state i {
          font-size: 48px;
          margin-bottom: 15px;
          opacity: 0.5;
        }
      `}</style>

      <AddNotes />
      
      {/* Success Alert */}
      {showSuccess && (
        <div className="alert alert-success success-alert fade-in" role="alert">
          <strong>Success!</strong> Note updated successfully!
        </div>
      )}

      {/* Search and Filter Section */}
      <div className="search-container fade-in">
        <div className="filter-container">
          <div className="flex-grow-1">
            <input
              type="text"
              className="form-control search-input"
              placeholder="üîç Search notes by title or description..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
          <div>
            <select
              className="form-select search-input"
              value={filterTag}
              onChange={(e) => setFilterTag(e.target.value)}
              style={{minWidth: '150px'}}
            >
              <option value="">All Tags</option>
              {uniqueTags.map(tag => (
                <option key={tag} value={tag}>{tag}</option>
              ))}
            </select>
          </div>
          {(searchTerm || filterTag) && (
            <button
              className="btn btn-outline-light btn-interactive"
              onClick={() => {setSearchTerm(""); setFilterTag("");}}
            >
              Clear Filters
            </button>
          )}
        </div>
      </div>

      {/* Hidden Modal Trigger */}
      <button type="button"
        className="btn btn-primary d-none"
        ref={ref}
        data-bs-toggle="modal"
        data-bs-target="#exampleModal">
        Launch demo modal
      </button>

      {/* Enhanced Modal */}
      <div className="modal fade" id="exampleModal" tabIndex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div className="modal-dialog modal-lg" role="document">
          <div className="modal-content">
            <div className="modal-header">
              <h5 className="modal-title" id="exampleModalLabel">
                ‚úèÔ∏è Edit Note
              </h5>
              <button type="button"
                className="btn-close btn-close-white"
                data-bs-dismiss="modal"
                aria-label="Close">
                <span aria-hidden="true"></span>
              </button>
            </div>
            <div className="modal-body">
              <form className='my-3'>
                <div className="mb-4">
                  <label htmlFor="etitle" className="form-label fw-bold">Title</label>
                  <input 
                    type="text" 
                    className="form-control" 
                    id="etitle" 
                    name="etitle" 
                    value={note.etitle} 
                    onChange={onChange}
                    placeholder="Enter note title..."
                  />
                  <div className="form-text">
                    {note.etitle.length}/50 characters {note.etitle.length < 5 && "(minimum 5 characters)"}
                  </div>
                </div>
                <div className="mb-4">
                  <label htmlFor="edescription" className="form-label fw-bold">Description</label>
                  <textarea 
                    className="form-control" 
                    id="edescription" 
                    name="edescription" 
                    value={note.edescription} 
                    onChange={onChange}
                    rows="4"
                    placeholder="Enter note description..."
                  />
                  <div className="form-text">
                    {note.edescription.length}/500 characters {note.edescription.length < 5 && "(minimum 5 characters)"}
                  </div>
                </div>
                <div className="mb-4">
                  <label htmlFor="etag" className="form-label fw-bold">Tag</label>
                  <input 
                    type="text" 
                    className="form-control" 
                    id="etag" 
                    name="etag" 
                    value={note.etag} 
                    onChange={onChange}
                    placeholder="Enter tag..."
                  />
                  <div className="form-text">
                    Organize your notes with tags
                  </div>
                </div>
              </form>
            </div>
            <div className="modal-footer">
              <button ref={refClose} type="button"
                className="btn btn-secondary btn-interactive"
                data-bs-dismiss="modal">
                Cancel
              </button>
              <button 
                disabled={note.etitle.length < 5 || note.edescription.length < 5 || isLoading}
                onClick={handleClick} 
                type="button" 
                className="btn btn-primary btn-interactive"
              >
                {isLoading ? (
                  <>
                    <span className="loading-spinner me-2"></span>
                    Updating...
                  </>
                ) : (
                  <>
                    üíæ Update Note
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Notes Display Section */}
      <div className="fade-in">
        <div className="d-flex justify-content-between align-items-center my-3">
          <h2 className="mb-0">üìù Your Notes</h2>
          <div className="note-count">
            {filteredNotes.length} of {notes.length} notes
            {(searchTerm || filterTag) && " (filtered)"}
          </div>
        </div>

        {filteredNotes.length === 0 ? (
          <div className="empty-state">
            {notes.length === 0 ? (
              <>
                <i className="fas fa-sticky-note"></i>
                <h4>No notes yet</h4>
                <p>Create your first note to get started!</p>
              </>
            ) : (
              <>
                <i className="fas fa-search"></i>
                <h4>No notes found</h4>
                <p>Try adjusting your search or filter criteria</p>
              </>
            )}
          </div>
        ) : (
          <div className="notes-grid">
            {filteredNotes.map((noteItem, index) => {
              return (
                <div 
                  key={noteItem._id} 
                  className="fade-in"
                  style={{
                    animationDelay: `${index * 0.1}s`,
                    animationFillMode: 'both'
                  }}
                >
                  <Noteitem 
                    updateNote={updateNote} 
                    note={noteItem}
                  />
                </div>
              );
            })}
          </div>
        )}
      </div>
    </>
  )
}

export default Notes